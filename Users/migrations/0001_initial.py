# Generated by Django 3.0.6 on 2022-11-17 10:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Organizations', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserCompanyRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified', models.NullBooleanField()),
                ('role', models.IntegerField(choices=[(1, 'Owner'), (2, 'Manager'), (3, 'Staff')])),
                ('product_interaction_permission', models.BooleanField(verbose_name='Can add/delete/edit products')),
                ('ordering_permission', models.BooleanField(verbose_name='Can search and create order')),
                ('company_info_permission', models.BooleanField(verbose_name='Can edit information about company')),
                ('factory_permission', models.BooleanField(verbose_name='Can add/delete/edit factories')),
                ('add_users_permission', models.BooleanField(verbose_name='Can add new users to company')),
                ('proposal_permission', models.BooleanField(verbose_name='Can accept/reject/react on proposals')),
                ('is_leader', models.BooleanField(default=False, verbose_name='Учредитель')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Organizations.Company')),
            ],
        ),
        migrations.CreateModel(
            name='UserFactoryRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified', models.NullBooleanField()),
                ('role', models.IntegerField(choices=[(1, 'Owner'), (2, 'Manager'), (3, 'Staff')])),
                ('product_interaction_permission', models.BooleanField(verbose_name='Can add/delete/edit products')),
                ('create_orders_permission', models.BooleanField(verbose_name='Can search and create order')),
                ('factory_info_permission', models.BooleanField(verbose_name='Can edit information about factory')),
                ('add_users_permission', models.BooleanField(verbose_name='Can add new users to factory')),
                ('proposal_permission', models.BooleanField(verbose_name='Can accept/reject/react on proposals')),
                ('factory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Organizations.Factory')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='Middle name')),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('telephone', models.CharField(blank=True, max_length=13, null=True, unique=True)),
                ('telegram_id', models.BigIntegerField(blank=True, null=True)),
                ('organization_account', models.BooleanField(default=False, verbose_name='Is account created for special organization')),
                ('change_password_date', models.DateField(blank=True, null=True, verbose_name='Date of last changing password')),
                ('companies', models.ManyToManyField(blank=True, related_name='user_companies', through='Users.UserCompanyRelation', to='Organizations.Company')),
                ('factories', models.ManyToManyField(blank=True, related_name='user_factories', through='Users.UserFactoryRelation', to='Organizations.Factory')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='userfactoryrelation',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserCompanyRelationAuthToken',
            fields=[
                ('key', models.CharField(max_length=60, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('expired', models.DateTimeField(blank=True, null=True, verbose_name='Expired')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.UserCompanyRelation', verbose_name='User and company relation')),
            ],
            options={
                'verbose_name': 'User company relation auth token',
                'verbose_name_plural': 'User company relation auth tokens',
            },
        ),
        migrations.AddField(
            model_name='usercompanyrelation',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_creator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usercompanyrelation',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='userfactoryrelation',
            constraint=models.UniqueConstraint(fields=('user', 'factory'), name='user_factory_unique'),
        ),
        migrations.AddConstraint(
            model_name='usercompanyrelation',
            constraint=models.UniqueConstraint(fields=('user', 'company'), name='user_company_unique'),
        ),
    ]
